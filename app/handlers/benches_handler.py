import html
from typing import Dict, Any
import aiohttp
from config import API_URL

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

import app.keyboards.keyboard as kb
from app.utils.states import GeoState, BenchForm, BenchDelete


router = Router()


'''
–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
'''


async def get_token(username: str) -> str:
    async with aiohttp.ClientSession() as session:
        async with session.post(f'{API_URL}/auth/tg/login?telegram_username={username}') as response:
            if response.status == 200:
                data = await response.json()
                if 'token' in data:
                    return data['token']
            return 'token is none'


'''
–û—Ç–º–µ–Ω–∞
'''


@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞‚ùå")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    if current_state.startswith("GeoState"):
        await message.answer(
            "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=kb.main,
        )

    if current_state.startswith("BenchForm"):
        await message.answer(
            "–û—Ç–º–µ–Ω–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∞–≤–æ—á–∫–∏",
            reply_markup=kb.main,
        )

    await state.clear()

'''
–°–æ–∑–¥–∞—Ç—å –ª–∞–≤–æ—á–∫—É
'''


@router.message(F.text == '‚ûï–°–æ–∑–¥–∞—Ç—å –ª–∞–≤–æ—á–∫—É')
async def fill_bench(message: Message, state: FSMContext) -> None:
    await state.set_state(BenchForm.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', reply_markup=kb.cancel)


@router.message(BenchForm.name)
async def bench_name(message: Message, state: FSMContext) -> None:
    if len(message.text) <= 50:
        esc_name = html.escape(message.text)
        await state.update_data(name=esc_name)
        await state.set_state(BenchForm.description)
        await message.answer('–û–ø–∏—à–∏—Ç–µ –ª–∞–≤–æ—á–∫—É')
    else:
        await message.answer('‚ùå<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è ‚Äî 50 —Å–∏–º–≤–æ–ª–æ–≤!</b>')


@router.message(BenchForm.description)
async def bench_description(message: Message, state: FSMContext) -> None:
    if len(message.text) <= 200:
        esc_description = html.escape(message.text)
        await state.update_data(description=esc_description)
        await state.set_state(BenchForm.count)
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ?')
    else:
        await message.answer('‚ùå<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è ‚Äî 200 —Å–∏–º–≤–æ–ª–æ–≤!</b>')


@router.message(BenchForm.count)
async def bench_count(message: Message, state: FSMContext) -> None:
    if message.text.isdigit():
        await state.update_data(count=message.text)
        await state.set_state(BenchForm.latitude)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', reply_markup=kb.geo)
    else:
        await message.answer('‚ùå<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>')


@router.message(BenchForm.latitude)
async def bench_latitude(message: Message, state: FSMContext) -> None:
    if message.location:
        await state.update_data(latitude=message.location.latitude)
        await state.set_state(BenchForm.longitude)
        await state.update_data(longitude=message.location.longitude)
        data = await state.get_data()
        await state.clear()

        await create_post_request(message=message, data=data)

    else:
        await message.answer('‚ùå<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!</b>', reply_markup=kb.geo)


async def show_summary(message: Message, data: Dict[str, Any]) -> None:
    name = data['name']
    description = data['description']
    count = data['count']
    latitude = data['latitude']
    longitude = data['longitude']
    text = (f"‚úÖ–í—ã —Å–æ–∑–¥–∞–ª–∏ –ª–∞–≤–æ—á–∫—Éü™ë: \"{name}\" (<b>x{count}</b>)\n <i>{description}</i>"
            f"\n –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: <code>{latitude}, {longitude}</code>\n"
            f"<span class=\"tg-spoiler\">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"/delete\" –∏–ª–∏ \"/delete <i>–ò–º—è –ª–∞–≤–æ—á–∫–∏</i>\" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</span>")

    await message.answer(text=text, reply_markup=kb.bench_delete)


async def create_post_request(message: Message, data: Dict[str, Any]) -> None:
    payload = {
        'name': data['name'],
        'description': data['description'],
        'count': data['count'],
        'latitude': data['latitude'],
        'longitude': data['longitude']
    }

    headers = {
        'Content-Type': 'application/json',
    }

    username = message.from_user.username
    token = await get_token(username)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

    cookies = {
        "token": token,
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f'{API_URL}/bench/create', json=payload, headers=headers, cookies=cookies) as response:
                response.raise_for_status()
                await show_summary(message=message, data=data)
                await message.answer_location(data['latitude'], data['longitude'], reply_markup=kb.main)
    except aiohttp.ClientResponseError as e:
        if e.status in [401, 404]:
            await message.answer('‚ùå<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ª–∞–≤–æ—á–µ–∫!</b>', reply_markup=kb.main)
        else:
            await message.answer('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–≤–æ—á–∫–∏!</b>', reply_markup=kb.main)


'''
–ù–∞–π—Ç–∏ –ª–∞–≤–æ—á–∫—É
'''


@router.message(F.text == 'üîç–ù–∞–π—Ç–∏ –ª–∞–≤–æ—á–∫—É')
async def find_nearest(message: Message, state: FSMContext) -> None:
    await state.set_state(GeoState.waiting_for_location)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', reply_markup=kb.geo)


@router.message(GeoState.waiting_for_location)
async def send_location(message: Message, state: FSMContext) -> None:
    if message.location:
        await state.set_state(GeoState.waiting_for_location)
        lat = message.location.latitude
        long = message.location.longitude
        await message.answer(f'–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: <code>{lat}</code>, <code>{long}</code>')

        async with aiohttp.ClientSession() as session:
            async with session.get(f'{API_URL}/nearest_bench/?latitude={lat}&longitude={long}') as response:
                data = await response.json()
                rs_lat = data['latitude']
                rs_long = data['longitude']
                await message.answer(f"ü™ë–ë–ª–∏–∂–∞–π—à–∞—è –ª–∞–≤–æ—á–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: <code>{rs_lat}</code>, "
                                     f"<code>{rs_long}</code>",
                                     reply_markup=kb.main)
                await message.reply_location(rs_lat, rs_long)
                await state.clear()

    else:
        await message.answer('‚ùå<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é</b>', reply_markup=kb.geo)


'''
–ò–∑–º–µ–Ω–∏—Ç—å –ª–∞–≤–æ—á–∫—É
'''


'''
–£–¥–∞–ª–∏—Ç—å –ª–∞–≤–æ—á–∫—É
'''


@router.message(Command('delete'))
async def delete_bench_command(message: Message, state: FSMContext):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) == 1:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ª–∞–≤–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:')
        await state.set_state(BenchDelete.name)
        return
    elif len(command_parts) == 2:
        name = command_parts[1]
        await delete_bench_by_name(name, message, state)
    else:
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete {name}')
        return


async def delete_bench_by_name(name: str, message: Message, state: FSMContext):
    headers = {'Content-Type': 'application/json'}
    username = message.from_user.username
    token = await get_token(username)
    cookies = {"token": token}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.delete(f'{API_URL}/bench/delete', params={'bench_name': name}, headers=headers,
                                      cookies=cookies) as response:
                response.raise_for_status()
                data = await response.json()

                if ("status" in data and data["status"] == "error"
                        and data["message"] == "Bench not found or you are not the creator"):
                    await message.answer('‚ùå<b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ª–∞–≤–æ—á–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º</b>',
                                         reply_markup=kb.main)
                else:
                    await message.answer(f'<b>–õ–∞–≤–æ—á–∫–∞ "{name}" —É–¥–∞–ª–µ–Ω–∞</b>')
    except aiohttp.ClientResponseError:
        await message.answer('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–≤–æ—á–∫–∏!</b>', reply_markup=kb.main)

    await state.clear()


@router.message(BenchDelete.name)
async def delete_bench(message: Message, state: FSMContext):
    name = message.text
    await delete_bench_by_name(name, message, state)
